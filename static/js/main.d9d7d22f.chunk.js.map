{"version":3,"sources":["Components/Stopwatch.jsx","Components/Infobox.jsx","App.js","reportWebVitals.js","index.js"],"names":["Stopwatch","props","useState","started","setStarted","focusTime","setFocusTime","pauseTime","setPauseTime","running","setRunning","useEffect","interval","sessionLength","setInterval","prevTime","Math","floor","breakMultiplier","clearInterval","focusSeconds","slice","focusMinutes","focusHours","pauseSeconds","pauseMinutes","document","title","alert","className","style","width","value","styles","buildStyles","textColor","pathColor","trailColor","strokeLinecap","pathTransitionDuration","strokeWidth","position","top","left","onClick","body","backgroundColor","getElementsByClassName","color","InfoBox","TextField","id","label","variant","size","defaultValue","onChange","handleSessionLength","error","sessionLengthError","helperText","handleBreakMultiplier","breakMultiplierError","App","setSessionLength","setBreakMultiplier","setBreakMultiplierError","setSessionLengthError","selected","setSelected","ToggleButton","e","target","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.d9d7d22f.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport HackTimer from \"hacktimer\";\r\nimport { CircularProgressbar ,CircularProgressbarWithChildren, buildStyles } from \"react-circular-progressbar/dist\";\r\nexport const Stopwatch = (props) => {\r\n    const [started, setStarted] = useState(false);\r\n    const [focusTime, setFocusTime] = useState(5);\r\n    const [pauseTime, setPauseTime] = useState(1);\r\n    const [running, setRunning] = useState(false);\r\n    useEffect(() => {\r\n        let interval;\r\n        if (running && started && focusTime < props.sessionLength * 1000 * 60 * 3) {\r\n          interval = setInterval(() => {\r\n            setFocusTime((prevTime) => prevTime + 1000);\r\n            setPauseTime(Math.floor(focusTime / props.breakMultiplier));\r\n          }, 1000);\r\n        } else if (!running && started && pauseTime > 0 && focusTime > 0) {\r\n          interval = setInterval(() => {\r\n            setPauseTime((prevTime) => prevTime - 1000);\r\n            setFocusTime(pauseTime * props.breakMultiplier);\r\n          }, 1000);\r\n        }\r\n        return () => clearInterval(interval);\r\n      }, [running, focusTime, pauseTime]);\r\n\r\n      let focusSeconds = (\"0\" + (Math.floor(focusTime / 1000) % 60)).slice(-2);\r\n      let focusMinutes = (\"0\" + (Math.floor(focusTime / 60000) % 60)).slice(-2);\r\n      let focusHours = (\"0\" + Math.floor(focusTime / 3600000) % 60).slice(-2);\r\n      let pauseSeconds = (\"0\" + (Math.floor(pauseTime / 1000) % 60)).slice(-2);\r\n      let pauseMinutes = (\"0\" + (Math.floor(pauseTime / 60000) % 60)).slice(-2);\r\n      const switchFocus = () => {\r\n        if (!started) {\r\n          setStarted(true);\r\n        }\r\n        setRunning(!running);\r\n        document.body.style.backgroundColor = running ? \"#131f52\" : \"#E7E7DB\";\r\n        document.getElementsByClassName(\"timer\")[0].style.color = running ? \"white\" : \"black\";\r\n      };\r\n\r\n      useEffect(() => {\r\n        document.title = running ? `${focusHours}:${focusMinutes}:${focusSeconds}` : `${pauseMinutes}:${pauseSeconds}`;\r\n        if (focusTime >= 1000 * props.sessionLength * 60 * 3 && started && running) {\r\n          document.title = `Focus session finished ðŸŽ‰`;\r\n          alert(\"Focus session finished\")\r\n          setRunning(false);\r\n        }\r\n        if (pauseTime <= 0 && started && !running) {\r\n          setPauseTime(0);\r\n          document.title = \"Pause finished!\";\r\n          alert(\"Pause finished\");\r\n          setStarted(false);\r\n        }\r\n     }, [focusSeconds, pauseSeconds]);\r\n\r\n    return (\r\n      <>\r\n        <div className=\"stopwatch\">\r\n            <div style={{width: \"30rem\"}}>\r\n              <CircularProgressbarWithChildren\r\n                  value={(focusTime/(1000 * props.sessionLength * 60))*100}\r\n                  styles={buildStyles({\r\n                      textColor: \"red\",\r\n                      pathColor: \"#007991\",\r\n                      trailColor: \"white\",\r\n                      strokeLinecap: \"round\",\r\n                      pathTransitionDuration: 0.5,\r\n                      strokeWidth: \"2\",\r\n                      })}>\r\n                  {running ? (focusHours !== \"00\" ? <span className=\"timer\">{focusHours}:{focusMinutes}:{focusSeconds}</span> : <span className=\"timer\">{focusMinutes}:{focusSeconds}</span>)\r\n                  : <span className=\"timer\">{pauseMinutes}:{pauseSeconds}</span>\r\n                  }\r\n              </CircularProgressbarWithChildren>\r\n            </div>\r\n            {focusTime >= 1000 * props.sessionLength * 60  ?\r\n              <div style={{ width: \"calc(30rem + 22%)\", position: \"relative\", top: \"calc((-30rem - 12%))\", left:\"-11%\"}}>\r\n              <CircularProgressbar\r\n                value={((focusTime)/(1000 * props.sessionLength * 60))*100 - 100}\r\n                styles={buildStyles({\r\n                  textColor: \"red\",\r\n                  pathColor: \"#007991\",\r\n                  trailColor: \"transparent\",\r\n                  strokeLinecap: \"round\",\r\n                  pathTransitionDuration: 0.5,\r\n                  })\r\n                }\r\n              />\r\n              </div> : null}\r\n              {focusTime >= 1000 * props.sessionLength * 60 * 2 ?\r\n              <div style={{ width: \"calc(30rem + 48%)\", position: \"relative\", top: \"calc((-30rem - 24%) * 2)\", left:\"-24%\"}}>\r\n              <CircularProgressbar\r\n                value={((focusTime)/(1000 * props.sessionLength * 60))*100 - 200}\r\n                styles={buildStyles({\r\n                  textColor: \"red\",\r\n                  pathColor: \"#007991\",\r\n                  trailColor: \"transparent\",\r\n                  strokeLinecap: \"round\",\r\n                  pathTransitionDuration: 0.5,\r\n                  })}\r\n              />\r\n              </div> : null}\r\n        </div>\r\n        <div className=\"buttons\">\r\n          <button onClick={switchFocus}>{running && started ? \"Pause\" : \"Focus\"}</button>\r\n          <button onClick={() => setFocusTime(5)}>Reset</button>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n\r\n","import React, { useState, useEffect } from \"react\";\r\nimport TextField from '@mui/material/TextField';\r\nexport const InfoBox = (props) => {\r\n    return (\r\n      <div className=\"infobox\">\r\n        <p className=\"info\">Flowmodoro is technique where you study until you lose focus, at which point you take a break that's up to 1/5th the length of your focus time.\r\n        <br/>\r\n        The focus session ends when 3 rings are filled.\r\n        </p>\r\n        <div className=\"inputs\">\r\n            <TextField \r\n            id=\"session-length\"\r\n            label=\"Minutes per ring\"\r\n            variant=\"outlined\"\r\n            size=\"small\"\r\n            defaultValue={props.sessionLength}\r\n            onChange={props.handleSessionLength}\r\n            error={props.sessionLengthError}\r\n            helperText={props.sessionLengthError ? \"Must be above 1\" : null}\r\n            \r\n            />\r\n            <TextField\r\n            id=\"break-multiplier\"\r\n            label=\"Break multiplier\"\r\n            variant=\"outlined\"\r\n            size=\"small\"\r\n            defaultValue={props.breakMultiplier}\r\n            onChange={props.handleBreakMultiplier}\r\n            error={props.breakMultiplierError}\r\n            helperText={props.breakMultiplierError ? \"Must be between 1 and 10\" : null}\r\n            />\r\n        </div>\r\n    </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n","\r\nimport React, {useState, useEffect} from 'react';\r\nimport './App.css';\r\nimport { Stopwatch } from './Components/Stopwatch';\r\nimport { InfoBox } from './Components/Infobox';\r\nimport ToggleButton from '@mui/material/ToggleButton';\r\nimport InfoIcon from '@mui/icons-material/Info';\r\n\r\nfunction App() {\r\n  const [sessionLength, setSessionLength] = useState(30);\r\n  const [breakMultiplier, setBreakMultiplier] = useState(5);\r\n  const [breakMultiplierError, setBreakMultiplierError] = useState(false);\r\n  const [sessionLengthError, setSessionLengthError] = useState(false);\r\n  const [selected, setSelected] = useState(false);\r\n\r\n  const handleSessionLength = (e) => {\r\n    if (e.target.value > 0) {\r\n      setSessionLength(e.target.value);\r\n      setSessionLengthError(false);\r\n    } else {\r\n      setSessionLengthError(true);\r\n    }\r\n  }\r\n  const handleBreakMultiplier = (e) => {\r\n    if (e.target.value > 0) {\r\n      setBreakMultiplier(e.target.value);\r\n      setBreakMultiplierError(false);\r\n    } else {\r\n      setBreakMultiplierError(true);\r\n    }\r\n  }\r\n  return (\r\n    <div className=\"App\">\r\n      <div className='info-button'>\r\n        <ToggleButton\r\n          value=\"check\"\r\n          selected={selected}\r\n          onChange={() => {\r\n            setSelected(!selected);\r\n          }}\r\n        >\r\n          <InfoIcon />\r\n        </ToggleButton>\r\n      </div>\r\n      {selected ? <InfoBox \r\n      sessionLength={sessionLength}\r\n      handleSessionLength={handleSessionLength}\r\n      breakMultiplier={breakMultiplier}\r\n      handleBreakMultiplier={handleBreakMultiplier}\r\n      breakMultiplierError={breakMultiplierError}\r\n      sessionLengthError={sessionLengthError}\r\n      /> : null}\r\n\r\n      <div className='stopwatch-container'>\r\n        <Stopwatch \r\n        sessionLength={sessionLength}\r\n        breakMultiplier={breakMultiplier}\r\n        />\r\n      </div>\r\n    \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}